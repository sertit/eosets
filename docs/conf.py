#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import eosets
import os

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
needs_sphinx = "7"

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.autosummary",
    "sphinx.ext.doctest",
    "sphinx.ext.intersphinx",
    "sphinx.ext.coverage",
    "sphinx.ext.viewcode",
    "sphinx.ext.napoleon",
    "sphinx_copybutton",
    "myst_nb",
]
myst_enable_extensions = [
    "amsmath",
    "colon_fence",
    "deflist",
    "dollarmath",
    "html_admonition",
    "html_image",
    "linkify",
    "replacements",
    "smartquotes",
    "substitution",
]

# Notebook integration parameters
nb_execution_mode = "cache"
nb_execution_timeout = 3600

# Manage new READTHEDOCS output mechanism
cache_path = os.getenv('READTHEDOCS_OUTPUT')
if cache_path is not None:
    nb_execution_cache_path = f"{cache_path}/../docs/_build/.jupyter_cache"

# This is going to generate a banner on top of each notebook
nbsphinx_prolog = ""

# sphinx-copybutton configurations
copybutton_prompt_text = r">>> |\.\.\. |\$ |In \[\d*\]: | {2,5}\.\.\.: | {5,8}: "
copybutton_prompt_is_regexp = True

# Scan all found documents for autosummary directives, and to generate stub
# pages for each
autosummary_generate = True

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The master toctree document.
master_doc = "index"

# General information about the project.
project = "eosets"
copyright = "Copyright 2025, SERTIT-ICube - France, https://sertit.unistra.fr/"
author = "ICube-SERTIT"

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = eosets.__version__

# The full version, including alpha/beta/rc tags.
release = version

today_fmt = "%Y-%m-%d"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = [
    "_build",
    "Thumbs.db",
    ".DS_Store",
]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_book_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
html_theme_options = {
    "repository_url": "https://github.com/sertit/eosets",
    "repository_branch": "main",
    "path_to_docs": "docs",
    "repository_provider": "custom"
}

html_logo = "_static/eosets.png"
html_title = ""

html_favicon = "_static/favicon.png"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.

html_show_sourcelink = False

html_last_updated_fmt = today_fmt

# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "eosetsdoc"

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {
    "python": ("https://docs.python.org/3/", None),
    "python-request": ("https://docs.python-requests.org/en/master/", None),
    "rasterio": ("https://rasterio.readthedocs.io/en/latest", None),
    "rioxarray": ("https://corteva.github.io/rioxarray/latest/", None),
    "geopandas": ("https://geopandas.org/en/latest", None),
    "xarray": ("https://docs.xarray.dev/en/latest", None),
    "cloudpathlib": ("https://cloudpathlib.drivendata.org/stable/", None),
    "numpy": ("https://numpy.org/doc/stable/", None),
    "sertit": ("sertit-utils.readthedocs.io/en/stable", None),
    "eoreader": (" eoreader.readthedocs.io/en/latest/", None),
}

add_function_parentheses = False
add_module_names = False


def _html_page_context(app, pagename, templatename, context, doctree):
    # Disable edit button for docstring generated pages
    if "generated" in pagename:
        context["theme_use_edit_page_button"] = False


def my_doc_skip(app, what, name, obj, skip, options):
    """
    https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html#skipping-members
    """
    skip = False

    # Skip these docstrings
    private = name.startswith("_") and name != "__init__"
    ghosted_fct = what == "function" and name in [
        # "cache",
        # "cached_property",
    ]
    ghosted_module = what == "module" and name in [
        # "data"
    ]
    ghosted = ghosted_fct or ghosted_module

    if ghosted or private:
        skip = True

    return skip

import os, shutil
def copy_static(app, docname):
    if app.builder.name == 'html':
        output_dir = os.path.join(app.outdir, 'docs', '_static')
        source_dir = os.path.join(app.srcdir, '..', 'docs', '_static')
        if not os.path.exists(output_dir):
            shutil.copytree(source_dir, output_dir)

def setup(app):
    """dummy docstring for pydocstyle"""
    app.connect('autodoc-skip-member', my_doc_skip)
    app.connect("html-page-context", _html_page_context)
    app.connect('build-finished', copy_static)
